data Unit : * {
  | tt : Unit
} ;

data Nat : * {
  | Z : Nat
  | S : Nat -> Nat
} ;

data Vec : * -> Nat -> * {
  | Nil  : (A : *) -> Vec A 0
  | Cons : (A : *) -> A -> (n : Nat) -> Vec A n -> Vec A (S n)
};

head : (A : *) -> (n : Nat) -> Vec A (S n) -> A ;
head A n v = 
  case v < _ : Vec A' n' => 
    case n' {
      | Z   => Unit
      | S _ => A'
    }
  >{
   | Nil _        => tt
   | Cons _ a _ _ => a
   } ;

tail : (A : *) -> (n : Nat) -> Vec A (S n) -> Vec A n ;
tail A n v = 
  case v < _ : Vec A' n' => 
    case n' {
      | Z   => Unit
      | S pn => Vec A' pn
    }
  >{
   | Nil _        => tt
   | Cons _ _ _ v => v
   } ;

data Fin : Nat -> * {
  | F1 : (n : Nat) -> Fin (S n)
  | FS : (n : Nat) -> Fin n -> Fin (S n)
} ;


nth : (A : *) -> (n : Nat) -> (x : Fin n) -> (v : Vec A n) -> A ;
nth A n x =
  case x <_ : Fin n => Vec A n -> A > {
    | F1 pn => 
      \ v => head A pn v
    | FS pn pfin => 
      \ v => nth A pn pfin (tail A pn v)
  };
